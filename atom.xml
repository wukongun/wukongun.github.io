<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wukongun.github.io</id>
    <title>wukongun</title>
    <updated>2020-05-18T15:55:17.018Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wukongun.github.io"/>
    <link rel="self" href="https://wukongun.github.io/atom.xml"/>
    <subtitle>技术博客</subtitle>
    <logo>https://wukongun.github.io/images/avatar.png</logo>
    <icon>https://wukongun.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, wukongun</rights>
    <entry>
        <title type="html"><![CDATA[weak_entry_t数据结构分析]]></title>
        <id>https://wukongun.github.io/post/weak_entry_t-shu-ju-jie-gou-fen-xi/</id>
        <link href="https://wukongun.github.io/post/weak_entry_t-shu-ju-jie-gou-fen-xi/">
        </link>
        <updated>2020-05-18T13:11:54.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-c++">struct weak_entry_t {
    DisguisedPtr&lt;objc_object&gt; referent;
    union {
        struct {
            weak_referrer_t *referrers;
            uintptr_t        out_of_line_ness : 2;
            uintptr_t        num_refs : PTR_MINUS_2;
            uintptr_t        mask;
            uintptr_t        max_hash_displacement;
        };
        struct {
            // out_of_line_ness field is low bits of inline_referrers[1]
            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];
        };
    };

    bool out_of_line() {
        return (out_of_line_ness == REFERRERS_OUT_OF_LINE);
    }

    weak_entry_t&amp; operator=(const weak_entry_t&amp; other) {
        memcpy(this, &amp;other, sizeof(other));
        return *this;
    }

    weak_entry_t(objc_object *newReferent, objc_object **newReferrer)
        : referent(newReferent)
    {
        inline_referrers[0] = newReferrer;
        for (int i = 1; i &lt; WEAK_INLINE_COUNT; i++) {
            inline_referrers[i] = nil;
        }
    }
};
</code></pre>
]]></content>
    </entry>
</feed>