<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wukongun.github.io</id>
    <title>Andy</title>
    <updated>2020-11-09T06:57:03.917Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wukongun.github.io"/>
    <link rel="self" href="https://wukongun.github.io/atom.xml"/>
    <subtitle>记录点滴
</subtitle>
    <logo>https://wukongun.github.io/images/avatar.png</logo>
    <icon>https://wukongun.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Andy</rights>
    <entry>
        <title type="html"><![CDATA[Xcode12 Info.plist显示不全解决办法]]></title>
        <id>https://wukongun.github.io/post/xcode12-infoplist-xian-shi-bu-quan-jie-jue-ban-fa/</id>
        <link href="https://wukongun.github.io/post/xcode12-infoplist-xian-shi-bu-quan-jie-jue-ban-fa/">
        </link>
        <updated>2020-11-09T06:55:33.000Z</updated>
        <content type="html"><![CDATA[<p>升级了Xcode12，发现Info.plist显示是挤在一起的，然后想把第三栏拖过去又是无效，所以怎么办，看图：<br>
<img src="https://wukongun.github.io/post-images/1604904981498.gif" alt="" loading="lazy"><br>
点击右上角(参考下图) 提示为&quot;show or hiden code review&quot;的按钮两次即可；<br>
<img src="https://wukongun.github.io/post-images/1604904993078.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS 微信Universal Links 接入指南]]></title>
        <id>https://wukongun.github.io/post/ios-wei-xin-universal-links-jie-ru-zhi-nan/</id>
        <link href="https://wukongun.github.io/post/ios-wei-xin-universal-links-jie-ru-zhi-nan/">
        </link>
        <updated>2020-09-24T10:40:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是-universal-links">什么是 Universal Links ?</h2>
<p>当用户点击一个 Universal Link 时，iOS 会直接将链接重定向到你的应用程序，而无需通过 Safari 或你的网站进行路由。另外，由于通用链接是标准的HTTP或HTTPS链接，一个URL同时适用于您的网站和应用程序。如果您的应用程序没有安装，系统将在Safari中打开URL，允许您的网站处理它。</p>
<h2 id="universal-links-和-url-schemes-比较">Universal Links 和 URL Schemes 比较</h2>
<p>还记得 URL Schemes 吗？iOS 系统中因 sandbox 机制的存在，应用之间互相访问只能通过一个叫 URL Schemes 的机制来完成。通过注册Scheme，自定义URL，来调起一个app，URL是自定义的，app可根据URL的内容来处理一些来自外部的请求。</p>
<p>URL Schemes 是不安全的。苹果没有限制多个app可以注册同样的 Scheme 。2015年，乌云网公布一个漏洞，称未越狱的设备存在一个泄露支付宝账户密码的漏洞，其实就是劫持了支付宝的 URL Scheme 实现的。</p>
<p>再来看看 Universal LInks。苹果这样描述它的安全性：“当安装了一个使用 Univesal Links 的应用程序时，iOS 会通过你网站上的苹果应用程序网站关联文件验证关联，从而消除了其他应用程序可能会申请你的 scheme 并重定向你的 url 的可能性。” 这样看来，Universal Links 确实解决了前面提到的 URL Schemes 的安全性问题。</p>
<p>除此之外，URL Schemes 在调起 app 前，总是有弹框，让用户选择是否打开。而 Universal Links 则是直接调起 app。</p>
<h2 id="如何支持-universal-links">如何支持 Universal Links ?</h2>
<ol>
<li>创建应用程序和网站之间的双向关联，并指定应用程序处理的 url。</li>
</ol>
<ul>
<li>添加<code>Associated Domains Entitlement</code>到你的 app。每个 Target 的设置如下：
<ol>
<li>打开工程的 <code>Capabilities</code> 选项卡，添加 <code>Associated Domains</code></li>
<li>在 Domains 列表中，点击 ’+‘ 按钮，新增一条</li>
<li>修改刚才新增那条 domain ，格式如下：</li>
</ol>
</li>
</ul>
<p>&gt; applinks:&lt;域名&gt;[:端口号]</p>
<p>例如：</p>
<p>&gt; applinks:developer.apple.com</p>
<ul>
<li>创建一个名为<code>apple-app-site-association</code>的文件</li>
<li>添加 <code>applinks</code> key 到 <code>apple-app-site-association</code> 文件中，格式如下：</li>
</ul>
<p>{<br>
&quot;applinks&quot;: {<br>
&quot;apps&quot;: [],<br>
&quot;details&quot;: [{<br>
&quot;appID&quot;: &quot;D3KQX62K1A.com.example.photoapp&quot;,<br>
&quot;paths&quot;: [&quot;/albums&quot;]<br>
},<br>
{<br>
&quot;appID&quot;: &quot;D3KQX62K1A.com.example.videoapp&quot;,<br>
&quot;paths&quot;: [&quot;/videos&quot;]<br>
}]<br>
}<br>
}</p>
<p><code>applinks</code> 通用链接对象有两个属性：</p>
<p><code>apps</code> 这个属性并不用于 Universal Links，但它必须出现，并设置为空数组。<br>
<code>details</code> 数组可以定义多个能处理通用链接的 app<br>
<code>appID</code> 定义了能处理通用链接的应用程序标识符，格式如下：</p>
<p>&gt; &lt;Team Identifier&gt;.&lt;Bundle Identifier&gt;</p>
<p><code>paths</code>数组定义了一组由应用程序去处理的路径。可使用* ?通配符以及NOT<br>
根据 app 的业务场景，修改好这个文件即可。</p>
<p>上传 <code>apple-app-site-association</code> 文件到你的网站上传的位置可以在网站根目录下，或者在<code>.well-known</code>目录下。<br>
如果使用<code>.well-known</code>目录，则地址遵循以下格式：</p>
<blockquote>
<p>https://&lt;域名&gt;/.well-known/apple-app-site-association</p>
</blockquote>
<ol>
<li>
<ul>
<li>必须使用https://和有效的证书来托管此文件，并且不使用任何重定向。</li>
</ul>
</li>
</ol>
<ul>
<li>测试 Universal Link 是否可用备忘录里输入可以让 app 处理的 Universal Link 网址，例如 我配置的paths 是 <code>[&quot;*&quot;]</code> , 表示域名下的任意网址， 我在备忘录里输入 https://foobar.com/foo 然后点击，如果成功是会打开 app 的。</li>
</ul>
<ol start="2">
<li>更新您的 AppDelegate，以响应iOS在 Universal Links 路由到您的应用程序时提供的 UserActivity 对象。当一个 Universal Link 被触发，iOS 会启动你的 app , 向它发送一个<code>NSUserActivity</code>对象。通过查询这个对象的属性，找到 app 是如何被启动的，以及决定要执行什么操作。</li>
</ol>
<p>示例</p>
<p>func application(_ application: UIApplication,<br>
continue userActivity: NSUserActivity,<br>
restorationHandler: @escaping ([Any]?) -&gt; Void) -&gt; Bool<br>
{<br>
guard userActivity.activityType == NSUserActivityTypeBrowsingWeb,<br>
let incomingURL = userActivity.webpageURL,<br>
let components = NSURLComponents(url: incomingURL, resolvingAgainstBaseURL: true),<br>
let path = components.path,<br>
let params = components.queryItems else {<br>
return false<br>
}</p>
<pre><code>print(&quot;path = (path)&quot;)

if let albumName = params.first(where: { $0.name == &quot;albumname&quot; } )?.value,
    let photoIndex = params.first(where: { $0.name == &quot;index&quot; })?.value {
    
    print(&quot;album = (albumName)&quot;)
    print(&quot;photoIndex = (photoIndex)&quot;)
    return true
    
} else {
    print(&quot;Either album name or photo index missing&quot;)
    return false
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS 微信分享后，部分手机显示未验证应用]]></title>
        <id>https://wukongun.github.io/post/ios-wei-xin-fen-xiang-hou-bu-fen-shou-ji-xian-shi-wei-yan-zheng-ying-yong/</id>
        <link href="https://wukongun.github.io/post/ios-wei-xin-fen-xiang-hou-bu-fen-shou-ji-xian-shi-wei-yan-zheng-ying-yong/">
        </link>
        <updated>2020-09-24T10:20:09.000Z</updated>
        <content type="html"><![CDATA[<p>最近我们的iOSApp微信分享，分享后会部分手机会出现未验证应用的情况，大大降低了用户的体验。注意事部分手机。经过查找发现是微信的问题，目前是灰度测试，后续如果不按照他们最新的对接可能全部分享都会显示未验证应用标识。中间也出现了些其他的小插曲，下边我们按照步骤依次来修改。<br>
一、升级SDK版本<br>
1.首先看下自己项目中微信分享是否是最新版本，不是的话需要先升级到<img src="https://wukongun.github.io/post-images/1600943220583.jpg" alt="" loading="lazy">最新的版本目前是1.8.7版本。<br>
2.如果之前你应用间跳转用的是URL Schemes的跳转，那么在升级SDK后就不能使用此方式进行App内外跳转了，必须使用Universallink方式跳转</p>
<p>二、生成和配置Universallink<br>
这里可以自己生成Universallink，这里不做具体描述。因为我们用的是ShareSDK，它会提供自动生成Universallink。<br>
1.打开MobTech，执行下图，完成ShareSDK的工作。</p>
<p>2.配置关联微信开放平台的universallink。<br>
【管理中心】-【移动应用】-【选择要配置的应用】-【开发信息修改】<br>
3.如果需要QQ分享也需要到QQ开放平台QQ互联。<br>
【应用管理】-【移动应用】-【查看】-【平台信息】-【修改】，修改内容跟微信平台几乎一致，跟着QQ要求添加所需内容在mob平台里查找。</p>
<p>二、配置项目工程<br>
1.苹果开发者中心找到对应的bundleID，修改打开【Associated Domains】选项。<br>
<img src="https://wukongun.github.io/post-images/1600943438366.jpg" alt="" loading="lazy"><br>
2.在Project中【Signing&amp;Capabilities】中添加【Associated Domains】<br>
<img src="https://wukongun.github.io/post-images/1600943455902.jpg" alt="" loading="lazy"><br>
3.pod更新到最新的SDK，我这里pod 'mob_sharesdk', '~&gt; 4.3.8',你也可以pod微信或者QQ的开放SDK。<br>
4.plist文件中【LSApplicationQueriesSchemes】中添加微信对应的白名单。<br>
<img src="https://wukongun.github.io/post-images/1600943484402.jpg" alt="" loading="lazy"></p>
<p>三、代码</p>
<pre><code class="language-Objective-c">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
此方法中添加注册微信和QQ或者ShareSDK的配置。
比如： [WXApi registerApp:wechat_appid universalLink:wechat_universalLink];
函数检测：
//在register之前打开log, 后续可以根据log排查问题
[WXApi startLogByLevel:WXLogLevelDetail logBlock:^(NSString *log) {
    NSLog(@&quot;WeChatSDK: %@&quot;, log);
}];

//务必在调用自检函数前注册
[WXApi registerApp:APP_ID universalLink:UNIVERSAL_LINK];

//调用自检函数
[WXApi checkUniversalLinkReady:^(WXULCheckStep step, WXCheckULStepResult* result) {
    NSLog(@&quot;WeixinSDK2：%@, %u, %@, %@&quot;, @(step), result.success, result.errorInfo, result.suggestion);
}];
</code></pre>
<p>控制台输出</p>
<pre><code class="language-Objective-c">2020-06-15 14:30:37.718227+0800 SXAutoStreets[10552:2910027] WXApiSDK2:0, 1, check passed,
2020-06-15 14:30:37.718377+0800 SXAutoStreets[10552:2910027] WXApiSDK2:1, 1, check passed,
2020-06-15 14:30:37.720022+0800 SXAutoStreets[10552:2910027] WXApiSDK2:2, 1, check passed,
2020-06-15 14:30:37.780891+0800 SXAutoStreets[10552:2910027] WXApiSDK:wxlog:set property list
2020-06-15 14:30:37.790073+0800 SXAutoStreets[10552:2910027] WXApiSDK2:3, 1, check passed,
2020-06-15 14:30:38.390261+0800 SXAutoStreets[10552:2910027] WXApiSDK2:4, 1, check passed,
2020-06-15 14:30:40.781874+0800 SXAutoStreets[10552:2910027] WXApiSDK2:5, 1, Universal Link check passed. The application is launched by WeChat via Universal Link,
2020-06-15 14:30:40.781981+0800 SXAutoStreets[10552:2910027] WXApiSDK2:6, 1, All Check Passed!,
</code></pre>
<p>如果0-6共7个步骤全部输出check passed，代表正确，否则代表有问题，需要一一查找。具体可以<a href="https://docs.qq.com/doc/DZHNvSGJLS3pqbHNl">参考此流程</a>对照。<br>
<a href="https://developers.weixin.qq.com/doc/oplatform/Mobile_App/Access_Guide/iOS.html#jump">新版集成文档</a></p>
<p>2.添加方法,该方法不添加会造成4之后流程不通过和支付流程出现问题。切记！！！</p>
<pre><code class="language-Objective-c">-(BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray&lt;id&lt;UIUserActivityRestoring&gt;&gt; * _Nullable))restorationHandler
{
    return  [WXApi handleOpenUniversalLink:userActivity delegate:self];
}
</code></pre>
<p>到此我们要做的事情就完成了，新版本放量上去让整体错误率下降到90%以下才会从未验证应用中移除。所以版本更新后，我们需要做的事情就是需要等几天了。</p>
<p>感触：找微信开放平台是真的没人理，这么个事情也不提前发个重大公告。搞得脑袋大。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[xcode 12 报错 'MASConstraint' defined here has different definitions in different modules;]]></title>
        <id>https://wukongun.github.io/post/xcode-12-bao-cuo-masconstraint-defined-here-has-different-definitions-in-different-modules/</id>
        <link href="https://wukongun.github.io/post/xcode-12-bao-cuo-masconstraint-defined-here-has-different-definitions-in-different-modules/">
        </link>
        <updated>2020-09-18T08:46:41.000Z</updated>
        <content type="html"><![CDATA[<p>'MASConstraint' defined here has different definitions in different modules;</p>
<p>类似错误 可以通过清理缓存解决</p>
<ol>
<li>命令<br>
<code>xcodebuild clean</code> 清理缓存 /在对应工程目录下执行命令</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS 14 关于IDFA 权限的申请及其变化]]></title>
        <id>https://wukongun.github.io/post/ios-14-guan-yu-idfa-quan-xian-de-shen-qing-ji-qi-bian-hua/</id>
        <link href="https://wukongun.github.io/post/ios-14-guan-yu-idfa-quan-xian-de-shen-qing-ji-qi-bian-hua/">
        </link>
        <updated>2020-09-16T05:33:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="2020年09年25日">2020年09年25日</h2>
<blockquote>
<p>看了很多消息说 idfa新变化推迟到2021年的年初实行 但是没有找到官方的文档</p>
</blockquote>
<h2 id="2020年09月03日">2020年09月03日</h2>
<h3 id="目前苹果已发出通知关于idfa权限问题将会在明年才开始实行">目前苹果已发出通知，关于idfa权限问题将会在明年才开始实行</h3>
<blockquote>
<p>在 Apple，我们认为隐私是一项基本人权。正如在 WWDC20 上所宣布的，App Store 产品页面将包含一个新的隐私信息部分，帮助用户了解 app 的隐私保护做法。今天我们将为开发者发布更多详情，列明新的隐私部分所涵盖的内容。此功能将在年底之前向用户推出。而在下个月底前，您将能够通过 App Store Connect 提交相关信息，为其做好准备。</p>
</blockquote>
<blockquote>
<p>此外，在 iOS 14、iPadOS 14 和 Apple tvOS 14 上，您需要征得用户的许可，才能在其他公司所拥有的 app 和网站上跟踪用户，或访问其设备的广告标识符。我们致力于确保用户拥有是否接受 app 跟踪的选择权。为让开发者有时间进行必要的更改，app 需要获得跟踪用户许可的要求将从明年年初开始实行。更多相关信息，包括 App Store 审核指南的更新，将在今年秋天发布。</p>
</blockquote>
<h2 id="2020年08月17日">2020年08月17日</h2>
<h3 id="测试发现如果将app追踪的总开关关闭的话新安装的app就算是调用申请idfa权限的方法系统权限弹窗也不会弹出">测试发现，如果将APP追踪的总开关关闭的话，新安装的APP就算是调用申请idfa权限的方法，系统权限弹窗也不会弹出</h3>
<figure data-type="image" tabindex="1"><img src="https://wukongun.github.io/post-images/1600234458156.png" alt="" loading="lazy"></figure>
<p>idfa是App推广过程中识别用户的重要标识数据！在iOS 14 之后，关于idfa的获取发生了变化，将会对APP的推广产生较大的影响</p>
<p>今天我们从代码层次来进行探讨 关于idfa的变动<br>
在iOS14 之前我们都是这样获取的</p>
<pre><code class="language-c">引入头文件
#import &lt;AdSupport/AdSupport.h&gt;
代码实现
  if ([ASIdentifierManager.sharedManager isAdvertisingTrackingEnabled]) {
        NSString * idfa = [ASIdentifierManager.sharedManager advertisingIdentifier].UUIDString;
  }else {
        NSLog(@&quot;用户开启了限制广告追踪&quot;);
  }
</code></pre>
<p>但是在iOS14中，获取我们还是通过同样的方法进行获取，但是我们需要先进行权限的申请(和使用定位相机一样),如果不申请权限，获取到的idfa 将会是 0000-0.......000</p>
<ul>
<li>在info.plist 中添加 权限申请描述</li>
</ul>
<pre><code class="language-c">&lt;key&gt;NSUserTrackingUsageDescription&lt;/key&gt;
&lt;string&gt;请允许获取并使用您的IDFA&lt;/string&gt;
</code></pre>
<ul>
<li>进行权限判断，根据不同权限进行判断</li>
</ul>
<pre><code class="language-c">if (@available(iOS 14, *)) {
        ATTrackingManagerAuthorizationStatus status = ATTrackingManager.trackingAuthorizationStatus;
        switch (status) {
            case ATTrackingManagerAuthorizationStatusDenied:
                NSLog(@&quot;用户拒绝&quot;);
                break;
            case ATTrackingManagerAuthorizationStatusAuthorized:
                NSLog(@&quot;用户允许&quot;);
                break;
            case ATTrackingManagerAuthorizationStatusNotDetermined:
                NSLog(@&quot;用户为做选择或未弹窗&quot;);
                break;
            default:
                break;
        }
    } else {
        // Fallback on earlier versions
       if ([ASIdentifierManager.sharedManager isAdvertisingTrackingEnabled]) {
       }else {
          NSLog(@&quot;用户开启了限制广告追踪&quot;);
       }
    }
</code></pre>
<ul>
<li>申请权限</li>
</ul>
<pre><code class="language-c">if (@available(iOS 14, *)) {
        [ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:^(ATTrackingManagerAuthorizationStatus status) {
            NSLog(@&quot;app追踪权限：%lu&quot;,(unsigned long)status);
        }];
     } else {
        // Fallback on earlier versions
     }
</code></pre>
<ul>
<li>获取idfa</li>
</ul>
<pre><code class="language-c">NSString * idfa = [ASIdentifierManager.sharedManager advertisingIdentifier].UUIDString;
</code></pre>
<h3 id="附件">附件</h3>
<p><img src="https://wukongun.github.io/post-images/1600234438041.jpg" alt="" loading="lazy"><br>
<img src="https://wukongun.github.io/post-images/1600234445888.png" alt="" loading="lazy"><br>
原文链接: <a href="https://www.jianshu.com/p/b4df139e959d">https://www.jianshu.com/p/b4df139e959d</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[梦境和现实的图腾]]></title>
        <id>https://wukongun.github.io/post/meng-jing-he-xian-shi/</id>
        <link href="https://wukongun.github.io/post/meng-jing-he-xian-shi/">
        </link>
        <updated>2020-06-05T11:51:49.000Z</updated>
        <summary type="html"><![CDATA[<p>盗梦空间中有个设定 剧中人会很难区分梦境和现实 他们区分的方法是 用自己的图腾 陀螺就是主角的图腾.</p>
]]></summary>
        <content type="html"><![CDATA[<p>盗梦空间中有个设定 剧中人会很难区分梦境和现实 他们区分的方法是 用自己的图腾 陀螺就是主角的图腾.</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[查看iPhone设备的 UDID]]></title>
        <id>https://wukongun.github.io/post/cha-kan-iphone-she-bei-de-udid/</id>
        <link href="https://wukongun.github.io/post/cha-kan-iphone-she-bei-de-udid/">
        </link>
        <updated>2019-09-24T09:48:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="苹果查看udid-itunes没改版之前-可以用itunes查看">苹果查看udid iTunes没改版之前 可以用itunes查看</h1>
<ol>
<li>现在可以通过扫码查看</li>
<li>或者通过xcode 设备Summary中会显示UDID 标志是identity</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[weak_entry_t数据结构分析]]></title>
        <id>https://wukongun.github.io/post/weak_entry_t-shu-ju-jie-gou-fen-xi/</id>
        <link href="https://wukongun.github.io/post/weak_entry_t-shu-ju-jie-gou-fen-xi/">
        </link>
        <updated>2019-02-14T13:11:54.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="weak_entry_t-是-weak对应的内存结构">weak_entry_t 是 weak对应的内存结构</h3>
]]></summary>
        <content type="html"><![CDATA[<h3 id="weak_entry_t-是-weak对应的内存结构">weak_entry_t 是 weak对应的内存结构</h3>
<!-- more -->
<pre><code class="language-c++">struct weak_entry_t {
    DisguisedPtr&lt;objc_object&gt; referent;
    union {
        struct {
            weak_referrer_t *referrers;
            uintptr_t        out_of_line_ness : 2;
            uintptr_t        num_refs : PTR_MINUS_2;
            uintptr_t        mask;
            uintptr_t        max_hash_displacement;
        };
        struct {
            // out_of_line_ness field is low bits of inline_referrers[1]
            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];
        };
    };

    bool out_of_line() {
        return (out_of_line_ness == REFERRERS_OUT_OF_LINE);
    }

    weak_entry_t&amp; operator=(const weak_entry_t&amp; other) {
        memcpy(this, &amp;other, sizeof(other));
        return *this;
    }

    weak_entry_t(objc_object *newReferent, objc_object **newReferrer)
        : referent(newReferent)
    {
        inline_referrers[0] = newReferrer;
        for (int i = 1; i &lt; WEAK_INLINE_COUNT; i++) {
            inline_referrers[i] = nil;
        }
    }
};
</code></pre>
<p>weak_entry_t内部优化设计：<br>
一个对象对应的弱引用数目较少的话(&lt;=WEAK_INLINE_COUNT，runtime把这个值设置为4)，则其弱引用会被依次保存到一个inline数组里。这个inline数组的内存会在weak_entry_t初始化的时候一并分配好，而不是需要用到的时候再去申请新的内存空间，从而达到提到运行效率的目的。</p>
<p>此外，union中的两个struct是共享同一块内存的，如果不使用inline数组，而直接使用HashTable的方式来实现，那么num_refs，mask和max_hash_displacement这些变量都需要单独的存储空间，会使用更多的内存。综上，使用inline数组在节约一定内存空间的同时还相对提高了运行效率。</p>
<p>out_of_line_ness占用的是inline_referrers[1]最低两位的空间，也是weak_entry_t当前使用inline数组还是outline数组(也就是HashTable的实现)的标记位。</p>
<p>对weak_entry_t主要操作的函数是grow_refs_and_insert和append_referrer</p>
<p>append_referrer函数来为一个对象保存新的弱引用</p>
<pre><code class="language-c++">static void append_referrer(weak_entry_t *entry, objc_object **new_referrer)
{
    if (! entry-&gt;out_of_line()) {
        // Try to insert inline.
        for (size_t i = 0; i &lt; WEAK_INLINE_COUNT; i++) {
            if (entry-&gt;inline_referrers[i] == nil) {
                entry-&gt;inline_referrers[i] = new_referrer;
                return;
            }
        }

        // Couldn't insert inline. Allocate out of line.
        weak_referrer_t *new_referrers = (weak_referrer_t *)
            calloc(WEAK_INLINE_COUNT, sizeof(weak_referrer_t));
        // This constructed table is invalid, but grow_refs_and_insert
        // will fix it and rehash it.
        for (size_t i = 0; i &lt; WEAK_INLINE_COUNT; i++) {
            new_referrers[i] = entry-&gt;inline_referrers[i];
        }
        entry-&gt;referrers = new_referrers;
        entry-&gt;num_refs = WEAK_INLINE_COUNT;
        entry-&gt;out_of_line_ness = REFERRERS_OUT_OF_LINE;
        entry-&gt;mask = WEAK_INLINE_COUNT-1;
        entry-&gt;max_hash_displacement = 0;
    }

    assert(entry-&gt;out_of_line());

    if (entry-&gt;num_refs &gt;= TABLE_SIZE(entry) * 3/4) {
        return grow_refs_and_insert(entry, new_referrer);
    }
    size_t begin = w_hash_pointer(new_referrer) &amp; (entry-&gt;mask);
    size_t index = begin;
    size_t hash_displacement = 0;
    while (entry-&gt;referrers[index] != nil) {
        hash_displacement++;
        index = (index+1) &amp; entry-&gt;mask;
        if (index == begin) bad_weak_table(entry);
    }
    if (hash_displacement &gt; entry-&gt;max_hash_displacement) {
        entry-&gt;max_hash_displacement = hash_displacement;
    }
    weak_referrer_t &amp;ref = entry-&gt;referrers[index];
    ref = new_referrer;
    entry-&gt;num_refs++;
}
</code></pre>
<ul>
<li>
<p>append_referrer函数首先处理weak_entry_t还在使用inline数组的情况。首先尝试像inline数组中插入一个新的弱引用，如果inline数组已满，那就创建一个WEAK_INLINE_COUNT大小的新数组，改用outline的方式，将inline数组中的元素依次拷贝过来。</p>
</li>
<li>
<p>函数的后半部分处理使用outline数组的情况，如果outline数组的使用率在75%及以上，那么调用grow_refs_and_insert函数进行扩充，并且插入新的弱引用。否则就直接进行hash运算插入，过程和weak_table_t的插入过程基本相同。</p>
</li>
</ul>
<pre><code class="language-c++">__attribute__((noinline, used))
static void grow_refs_and_insert(weak_entry_t *entry, 
                                 objc_object **new_referrer)
{
    assert(entry-&gt;out_of_line());

    size_t old_size = TABLE_SIZE(entry);
    size_t new_size = old_size ? old_size * 2 : 8;

    size_t num_refs = entry-&gt;num_refs;
    weak_referrer_t *old_refs = entry-&gt;referrers;
    entry-&gt;mask = new_size - 1;
    
    entry-&gt;referrers = (weak_referrer_t *)
        calloc(TABLE_SIZE(entry), sizeof(weak_referrer_t));
    entry-&gt;num_refs = 0;
    entry-&gt;max_hash_displacement = 0;
    
    for (size_t i = 0; i &lt; old_size &amp;&amp; num_refs &gt; 0; i++) {
        if (old_refs[i] != nil) {
            append_referrer(entry, old_refs[i]);
            num_refs--;
        }
    }
    // Insert
    append_referrer(entry, new_referrer);
    if (old_refs) free(old_refs);
}
</code></pre>
<p>函数首先对outline数组进行扩充，容量是原来的两倍。而后依次将老数组中的元素hash插入到新数组中，最终hash插入新的引用。</p>
<pre><code class="language-c++">static void remove_referrer(weak_entry_t *entry, objc_object **old_referrer)
{
    if (! entry-&gt;out_of_line()) {
        for (size_t i = 0; i &lt; WEAK_INLINE_COUNT; i++) {
            if (entry-&gt;inline_referrers[i] == old_referrer) {
                entry-&gt;inline_referrers[i] = nil;
                return;
            }
        }
        _objc_inform(&quot;Attempted to unregister unknown __weak variable &quot;
                     &quot;at %p. This is probably incorrect use of &quot;
                     &quot;objc_storeWeak() and objc_loadWeak(). &quot;
                     &quot;Break on objc_weak_error to debug.\n&quot;, 
                     old_referrer);
        objc_weak_error();
        return;
    }

    size_t begin = w_hash_pointer(old_referrer) &amp; (entry-&gt;mask);
    size_t index = begin;
    size_t hash_displacement = 0;
    while (entry-&gt;referrers[index] != old_referrer) {
        index = (index+1) &amp; entry-&gt;mask;
        if (index == begin) bad_weak_table(entry);
        hash_displacement++;
        if (hash_displacement &gt; entry-&gt;max_hash_displacement) {
            _objc_inform(&quot;Attempted to unregister unknown __weak variable &quot;
                         &quot;at %p. This is probably incorrect use of &quot;
                         &quot;objc_storeWeak() and objc_loadWeak(). &quot;
                         &quot;Break on objc_weak_error to debug.\n&quot;, 
                         old_referrer);
            objc_weak_error();
            return;
        }
    }
    entry-&gt;referrers[index] = nil;
    entry-&gt;num_refs--;
}
</code></pre>
<ul>
<li>remove_referrer函数负责删除一个弱引用。函数首先处理inline数组的情况，直接将对应的弱引用项置空。如果使用了outline数组，则通过hash找到要删除的项，并直接删除。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[weak_table_t insert referent remove]]></title>
        <id>https://wukongun.github.io/post/weak_table_t-insert-referent-remove/</id>
        <link href="https://wukongun.github.io/post/weak_table_t-insert-referent-remove/">
        </link>
        <updated>2019-02-13T13:51:44.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="add-new_entry-to-the-objects-table-of-weak-references">Add new_entry to the object's table of weak references.</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="add-new_entry-to-the-objects-table-of-weak-references">Add new_entry to the object's table of weak references.</h2>
<!-- more -->
<pre><code class="language-c++">/** 
 * Add new_entry to the object's table of weak references.
 * Does not check whether the referent is already in the table.
 */
static void weak_entry_insert(weak_table_t *weak_table, weak_entry_t *new_entry)
{
    weak_entry_t *weak_entries = weak_table-&gt;weak_entries;
    assert(weak_entries != nil);

    size_t begin = hash_pointer(new_entry-&gt;referent) &amp; (weak_table-&gt;mask);
    size_t index = begin;
    size_t hash_displacement = 0;
    while (weak_entries[index].referent != nil) {
        //说明哈希冲突了
        index = (index+1) &amp; weak_table-&gt;mask;
        if (index == begin) bad_weak_table(weak_entries);
        hash_displacement++;
    }

    weak_entries[index] = *new_entry;
    weak_table-&gt;num_entries++;
    //不是很懂为什么要记录偏移量
    if (hash_displacement &gt; weak_table-&gt;max_hash_displacement) {
        weak_table-&gt;max_hash_displacement = hash_displacement;
    }
}
</code></pre>
<blockquote>
<p>hash_pointer是对引用(指针)的hash函数</p>
</blockquote>
<blockquote>
<p>weak_table的size保持是2的N次方，而mask的值为size - 1，所以mask的二进制后N位都是1，而之前都是0，类似于00000111。所以与mask与操作后的值肯定会在[0,mask]这个区间内，也正好是weak_table<br>
实际的合法内存空间。</p>
</blockquote>
<blockquote>
<p>如果发生了hash碰撞的话，将会依次向下寻找空位，并且用max_hash_displacement来记录整个weak_table最大的偏移量。</p>
</blockquote>
<blockquote>
<p>解决哈希冲突的方法是开放地址法</p>
</blockquote>
<p>开放地址法有个非常关键的特征，就是所有输入的元素全部存放在哈希表里，也就是说，同义词冲突的解决是不需要任何的链表来实现的(链地址法)，换句话说，也就是这个哈希表的装载因子不会超过1。它的实现是在插入一个元素的时候，先通过哈希函数进行判断，若是发生哈希冲突，就以当前地址为基准，根据再寻址的方法（探查序列），去寻找下一个地址，若发生冲突再去寻找，直至找到一个为空的地址为止。所以这种方法又称为再散列法。</p>
<h3 id="weak_table_t采用的线性探查来解决哈希冲突">weak_table_t采用的线性探查来解决哈希冲突</h3>
<h2 id="查找的过程和插入类似">查找的过程和插入类似</h2>
<pre><code class="language-c++">static weak_entry_t *
weak_entry_for_referent(weak_table_t *weak_table, objc_object *referent)
{
    assert(referent);

    weak_entry_t *weak_entries = weak_table-&gt;weak_entries;

    if (!weak_entries) return nil;

    size_t begin = hash_pointer(referent) &amp; weak_table-&gt;mask;
    size_t index = begin;
    size_t hash_displacement = 0;
    while (weak_table-&gt;weak_entries[index].referent != referent) {
        index = (index+1) &amp; weak_table-&gt;mask;
        if (index == begin) bad_weak_table(weak_table-&gt;weak_entries);
        hash_displacement++;
        if (hash_displacement &gt; weak_table-&gt;max_hash_displacement) {
            return nil;
        }
    }
    
    return &amp;weak_table-&gt;weak_entries[index];
}
</code></pre>
<h2 id="remove-entry-from-the-zones-table-of-weak-references">Remove entry from the zone's table of weak references.</h2>
<p>该函数的目的是从weak_table中删除某一项entry，即某个object和其weak引用的映射关系。函数的实现比较简单，首先将相应的内存清零，而后将weak_table的计数减一，然后调用weak_compact_maybe方法来判断是否需要缩小weak_table的空间。</p>
<pre><code class="language-c++">/**
 * Remove entry from the zone's table of weak references.
 */
static void weak_entry_remove(weak_table_t *weak_table, weak_entry_t *entry)
{
    // remove entry
    if (entry-&gt;out_of_line()) free(entry-&gt;referrers);
    bzero(entry, sizeof(*entry));

    weak_table-&gt;num_entries--;

    weak_compact_maybe(weak_table);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[苹果企业开发者账号如何删除UDID]]></title>
        <id>https://wukongun.github.io/post/ping-guo-qi-ye-kai-fa-zhe-zhang-hao-ru-he-shan-chu-udid/</id>
        <link href="https://wukongun.github.io/post/ping-guo-qi-ye-kai-fa-zhe-zhang-hao-ru-he-shan-chu-udid/">
        </link>
        <updated>2018-09-24T09:53:03.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>点击左栏中的Device选项，如下图所示，再根据箭头指向点击 Edit 按钮进行编辑<br>
<img src="https://wukongun.github.io/post-images/1600941197927.jpeg" alt="" loading="lazy"></li>
<li>选中你所想要删除的设备，点击箭头所示的Disable按钮<br>
<img src="https://wukongun.github.io/post-images/1600941209025.jpeg" alt="" loading="lazy"></li>
<li>如下图所示会出现提示窗口，核对你想要删除的设备信息，确认无误后，点击红色按钮Disable进行删除<br>
<img src="https://wukongun.github.io/post-images/1600941223930.jpeg" alt="" loading="lazy"></li>
<li>严格意义上来讲，上述的删除其实是一种禁用，他只是将你选中的设备禁用了，效果跟删除没什么严格上的区别，该方式只是禁用设备UDID,苹果每年提供一次删除UDID的机会,只要到了设备重置的时间,此页面会出现设备删除的按钮,不到设备重置的时间,该按钮不显示。<br>
由于该账号还没有到设备重置的时间,所以无法截图，但是其数据删除的时间会在首页的Membership一栏中找到，如下图所示。如果你想要彻底的将设备的UDID删除，只能等到设备重置日期才可以。<br>
<img src="https://wukongun.github.io/post-images/1600941232114.jpeg" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
</feed>